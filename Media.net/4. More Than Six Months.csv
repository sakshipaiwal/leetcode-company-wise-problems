Difficulty,Title,Frequency,Acceptance Rate,Link,Topics
HARD,Minimum Operations to Form Subsequence With Target Sum,100.0,0.31258860561789653,https://leetcode.com/problems/minimum-operations-to-form-subsequence-with-target-sum,"Array, Greedy, Bit Manipulation"
HARD,Scramble String,96.4,0.42104483655620206,https://leetcode.com/problems/scramble-string,"String, Dynamic Programming"
EASY,Best Time to Buy and Sell Stock,86.9,0.5515736442017602,https://leetcode.com/problems/best-time-to-buy-and-sell-stock,"Array, Dynamic Programming"
MEDIUM,Count the Number of Square-Free Subsets,86.9,0.2510594100540091,https://leetcode.com/problems/count-the-number-of-square-free-subsets,"Array, Math, Dynamic Programming, Bit Manipulation, Bitmask"
MEDIUM,Flatten Binary Tree to Linked List,83.8,0.6834777058079693,https://leetcode.com/problems/flatten-binary-tree-to-linked-list,"Linked List, Stack, Tree, Depth-First Search, Binary Tree"
HARD,Substring with Concatenation of All Words,83.8,0.3296371782222723,https://leetcode.com/problems/substring-with-concatenation-of-all-words,"Hash Table, String, Sliding Window"
EASY,Merge Two Sorted Lists,80.2,0.667528675995941,https://leetcode.com/problems/merge-two-sorted-lists,"Linked List, Recursion"
HARD,Painting the Walls,75.9,0.4848283664496548,https://leetcode.com/problems/painting-the-walls,"Array, Dynamic Programming"
MEDIUM,Jump Game,70.7,0.3940146583550075,https://leetcode.com/problems/jump-game,"Array, Dynamic Programming, Greedy"
HARD,Maximum Genetic Difference Query,70.7,0.4424918032786886,https://leetcode.com/problems/maximum-genetic-difference-query,"Array, Hash Table, Bit Manipulation, Depth-First Search, Trie"
EASY,Fizz Buzz,70.7,0.7430925255536627,https://leetcode.com/problems/fizz-buzz,"Math, String, Simulation"
MEDIUM,Valid Sudoku,63.9,0.6216840077324302,https://leetcode.com/problems/valid-sudoku,"Array, Hash Table, Matrix"
HARD,The Number of Good Subsets,63.9,0.35862985383138934,https://leetcode.com/problems/the-number-of-good-subsets,"Array, Math, Dynamic Programming, Bit Manipulation, Bitmask"
MEDIUM,LRU Cache,63.9,0.45077590886284297,https://leetcode.com/problems/lru-cache,"Hash Table, Linked List, Design, Doubly-Linked List"
MEDIUM,Best Time to Buy and Sell Stock II,63.9,0.6938099735200915,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii,"Array, Dynamic Programming, Greedy"
EASY,Minimum Time Visiting All Points,63.9,0.8256385208060882,https://leetcode.com/problems/minimum-time-visiting-all-points,"Array, Math, Geometry"
MEDIUM,Binary Search Tree Iterator,63.9,0.7473191537930544,https://leetcode.com/problems/binary-search-tree-iterator,"Stack, Tree, Design, Binary Search Tree, Binary Tree, Iterator"
EASY,Valid Phone Numbers,63.9,0.27393792531821326,https://leetcode.com/problems/valid-phone-numbers,Shell
MEDIUM,Maximum Value of an Ordered Triplet II,54.5,0.5668091889637089,https://leetcode.com/problems/maximum-value-of-an-ordered-triplet-ii,Array
MEDIUM,Sum of Remoteness of All Cells,54.5,0.7081124683106707,https://leetcode.com/problems/sum-of-remoteness-of-all-cells,"Array, Hash Table, Depth-First Search, Breadth-First Search, Union Find, Matrix"
EASY,Maximum Value of an Ordered Triplet I,54.5,0.5831112257043235,https://leetcode.com/problems/maximum-value-of-an-ordered-triplet-i,Array
MEDIUM,Longest Palindromic Substring,54.5,0.35744435088979076,https://leetcode.com/problems/longest-palindromic-substring,"Two Pointers, String, Dynamic Programming"
HARD,Difference Between Maximum and Minimum Price Sum,54.5,0.3169075094431161,https://leetcode.com/problems/difference-between-maximum-and-minimum-price-sum,"Array, Dynamic Programming, Tree, Depth-First Search"
MEDIUM,Minimum Cost to Buy Apples,54.5,0.6718180923319224,https://leetcode.com/problems/minimum-cost-to-buy-apples,"Array, Graph, Heap (Priority Queue), Shortest Path"
HARD,Make the XOR of All Segments Equal to Zero,54.5,0.3985941161155949,https://leetcode.com/problems/make-the-xor-of-all-segments-equal-to-zero,"Array, Dynamic Programming, Bit Manipulation"
MEDIUM,Queens That Can Attack the King,54.5,0.7214221215506817,https://leetcode.com/problems/queens-that-can-attack-the-king,"Array, Matrix, Simulation"
HARD,Minimum XOR Sum of Two Arrays,54.5,0.489431497275865,https://leetcode.com/problems/minimum-xor-sum-of-two-arrays,"Array, Dynamic Programming, Bit Manipulation, Bitmask"
HARD,Sum of Distances in Tree,54.5,0.653154546087064,https://leetcode.com/problems/sum-of-distances-in-tree,"Dynamic Programming, Tree, Depth-First Search, Graph"
MEDIUM,Furthest Building You Can Reach,54.5,0.5034392479351542,https://leetcode.com/problems/furthest-building-you-can-reach,"Array, Greedy, Heap (Priority Queue)"
MEDIUM,Minimum Total Space Wasted With K Resizing Operations,54.5,0.4287564766839378,https://leetcode.com/problems/minimum-total-space-wasted-with-k-resizing-operations,"Array, Dynamic Programming"
HARD,Sliding Window Maximum,54.5,0.47536915397880397,https://leetcode.com/problems/sliding-window-maximum,"Array, Queue, Sliding Window, Heap (Priority Queue), Monotonic Queue"
MEDIUM,Merge Intervals,54.5,0.49292652403952486,https://leetcode.com/problems/merge-intervals,"Array, Sorting"
HARD,All O`one Data Structure,54.5,0.4416331835861244,https://leetcode.com/problems/all-oone-data-structure,"Hash Table, Linked List, Design, Doubly-Linked List"
EASY,Majority Element,54.5,0.6570097404498996,https://leetcode.com/problems/majority-element,"Array, Hash Table, Divide and Conquer, Sorting, Counting"
HARD,Number of Submatrices That Sum to Target,54.5,0.7444764474259881,https://leetcode.com/problems/number-of-submatrices-that-sum-to-target,"Array, Hash Table, Matrix, Prefix Sum"
HARD,Trapping Rain Water,54.5,0.6495026022460716,https://leetcode.com/problems/trapping-rain-water,"Array, Two Pointers, Dynamic Programming, Stack, Monotonic Stack"
MEDIUM,Search in Rotated Sorted Array,54.5,0.42739974294578964,https://leetcode.com/problems/search-in-rotated-sorted-array,"Array, Binary Search"
HARD,Maximum XOR of Two Non-Overlapping Subtrees,54.5,0.49610545236668663,https://leetcode.com/problems/maximum-xor-of-two-non-overlapping-subtrees,"Tree, Depth-First Search, Graph, Trie"
